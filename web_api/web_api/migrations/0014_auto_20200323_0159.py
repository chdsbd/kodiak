# Generated by Django 3.0.3 on 2020-03-23 01:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("web_api", "0013_auto_20200310_0412"),
    ]

    operations = [
        migrations.CreateModel(
            name="StripeCustomerInformation",
            fields=[
                (
                    "customer_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for Stripe Customer object.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "subscription_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for Stripe Subscription object.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "plan_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for Stripe Plan object.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "payment_method_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for Stripe PaymentMethod object.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "customer_email",
                    models.CharField(
                        help_text="The customer`s email address.", max_length=255
                    ),
                ),
                (
                    "customer_balance",
                    models.IntegerField(
                        default=0,
                        help_text="Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.",
                    ),
                ),
                (
                    "customer_created",
                    models.IntegerField(
                        help_text="Time at which the object was created. Measured in seconds since the Unix epoch."
                    ),
                ),
                (
                    "customer_delinquent",
                    models.BooleanField(
                        help_text="When the customer`s latest invoice is billed by charging automatically, delinquent is true if the invoice`s latest charge is failed. When the customer`s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date."
                    ),
                ),
                (
                    "payment_method_card_brand",
                    models.CharField(
                        help_text="Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "payment_method_card_exp_month",
                    models.IntegerField(
                        help_text="Two-digit number representing the card`s expiration month.",
                        null=True,
                    ),
                ),
                (
                    "payment_method_card_exp_year",
                    models.IntegerField(
                        help_text="Four-digit number representing the card`s expiration year.",
                        null=True,
                    ),
                ),
                (
                    "payment_method_card_last4",
                    models.CharField(
                        help_text="The last four digits of the card.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "plan_amount",
                    models.IntegerField(
                        help_text="The amount in cents to be charged on the interval specified."
                    ),
                ),
                (
                    "subscription_quantity",
                    models.IntegerField(
                        help_text="The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan."
                    ),
                ),
                (
                    "subscription_start_date",
                    models.IntegerField(
                        help_text="Date when the subscription was first created. The date might differ from the created date due to backdating."
                    ),
                ),
                (
                    "subscription_current_period_end",
                    models.IntegerField(
                        help_text="End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created."
                    ),
                ),
                (
                    "subscription_current_period_start",
                    models.IntegerField(
                        help_text="Start of the current period that the subscription has been invoiced for."
                    ),
                ),
            ],
            options={
                "db_table": "stripe_customer_information",
            },
        ),
        migrations.AddField(
            model_name="account",
            name="stripe_customer_id",
            field=models.CharField(
                blank=True,
                db_index=True,
                help_text="ID of the Stripe Customer associated with this account. This will have a corresponding object in StripeCustomerInformation if the user has created a subscription.",
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="trial_expiration",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="account",
            name="trial_start",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="account",
            name="trial_started_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="web_api.User",
            ),
        ),
    ]
