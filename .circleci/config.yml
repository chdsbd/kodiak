version: 2

jobs:
  bot_test:
    docker:
      - image: python:3.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      - image: circleci/redis:5.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes bot/
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - bot-v1-{{ checksum "bot/poetry.lock" }}
      - run:
          name: install dependencies
          working_directory: bot
          command: |
            # Use our new PATH so we can call poetry from bash
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            command -v poetry || python -m pip install --user poetry==1.1.9
            poetry config virtualenvs.in-project true
            poetry install
      - save_cache:
          paths:
            - ./bot/.mypy_cache
            - /root/.cache/
          key: bot-v1-{{ checksum "bot/poetry.lock" }}
      - run:
          name: run tests
          working_directory: bot
          command: ./s/test
      - run:
          name: upload code coverage
          working_directory: bot
          command: ./s/upload-code-cov

  bot_lint:
    docker:
      - image: python:3.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes bot/
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - bot-v1-{{ checksum "bot/poetry.lock" }}
      - run:
          name: install dependencies
          working_directory: bot
          command: |
            # Use our new PATH so we can call poetry from bash
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            command -v poetry || python -m pip install --user poetry==1.1.9
            poetry config virtualenvs.in-project true
            poetry install
      - save_cache:
          paths:
            - ./bot/.mypy_cache
            - /root/.cache/
          key: bot-v1-{{ checksum "bot/poetry.lock" }}
      - run:
          name: run lints
          working_directory: bot
          command: ./s/lint

  # https://circleci.com/docs/2.0/building-docker-images/
  bot_build_container:
    docker:
      - image: docker:18.05.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build container
          working_directory: bot
          command: ./s/build

  docs_typecheck:
    docker:
      - image: circleci/node:12.4.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes docs/
      - restore_cache:
          keys:
            - docs-site-v1-{{ checksum "docs/yarn.lock" }}
      - run:
          name: install dependencies
          working_directory: docs
          command: |
            yarn install --frozen-lockfile --non-interactive
      - save_cache:
          paths:
            - ./docs/node_modules
          key: docs-site-v1-{{ checksum "docs/yarn.lock" }}
      - run:
          name: run typechecker
          working_directory: docs
          command: s/typecheck

  docs_fmt:
    docker:
      - image: circleci/node:12.4.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes docs/
      - restore_cache:
          keys:
            - docs-site-v1-{{ checksum "docs/yarn.lock" }}
      - run:
          name: install dependencies
          working_directory: docs
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          paths:
            - ./docs/node_modules
          key: docs-site-v1-{{ checksum "docs/yarn.lock" }}
      - run:
          name: run fmt
          working_directory: docs
          command: s/fmt-ci

  docs_build:
    docker:
      - image: circleci/node:12.4.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes docs/
      - restore_cache:
          keys:
            - docs-site-v1-{{ checksum "docs/yarn.lock" }}
      - run:
          name: install dependencies
          working_directory: docs
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          paths:
            - ./docs/node_modules
          key: docs-site-v1-{{ checksum "docs/yarn.lock" }}
      - run:
          name: build
          working_directory: docs
          command: s/build

  web_api_test:
    docker:
      - image: python:3.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      - image: circleci/postgres:12-ram
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_DB: web_api_test
          POSTGRES_PASSWORD: my_test_postgres_password
      - image: circleci/redis:5.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    environment:
      DATABASE_URL: postgres://postgres:my_test_postgres_password@127.0.0.1:5432/web_api_test
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes web_api/
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - web_api-v1-{{ checksum "web_api/poetry.lock" }}
      - run:
          name: install dependencies
          working_directory: web_api
          command: |
            # Use our new PATH so we can call poetry from bash
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            command -v poetry || python -m pip install --user poetry==1.1.9
            poetry config virtualenvs.in-project true
            poetry install
      - save_cache:
          paths:
            - ./web_api/.mypy_cache
            - /root/.cache/
          key: web_api-v1-{{ checksum "web_api/poetry.lock" }}
      - run:
          name: run tests
          working_directory: web_api
          command: ./s/test
      - run:
          name: upload code coverage
          working_directory: web_api
          command: ./s/upload-code-cov

  web_api_lint:
    docker:
      - image: python:3.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes web_api/
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - web_api-v1-{{ checksum "web_api/poetry.lock" }}
      - run:
          name: install dependencies
          working_directory: web_api
          command: |
            # Use our new PATH so we can call poetry from bash
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            command -v poetry || python -m pip install --user poetry==1.1.9
            poetry config virtualenvs.in-project true
            poetry install
      - save_cache:
          paths:
            - ./web_api/.mypy_cache
            - /root/.cache/
          key: web_api-v1-{{ checksum "web_api/poetry.lock" }}
      - run:
          name: run lints
          working_directory: web_api
          command: ./s/lint

  web_api_squawk:
    docker:
      - image: python:3.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      - image: circleci/postgres:12-ram
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_DB: web_api_test
          POSTGRES_PASSWORD: my_test_postgres_password
    environment:
      DATABASE_URL: postgres://postgres:my_test_postgres_password@127.0.0.1:5432/web_api_test
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes web_api/
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - web_api-v1-{{ checksum "web_api/poetry.lock" }}
      - run:
          name: install dependencies
          working_directory: web_api
          command: |
            # Use our new PATH so we can call poetry from bash
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            command -v poetry || python -m pip install --user poetry==1.1.9
            poetry config settings.virtualenvs.in-project true
            poetry install
      - save_cache:
          paths:
            - ./web_api/.mypy_cache
            - /root/.cache/
          key: web_api-v1-{{ checksum "web_api/poetry.lock" }}
      - run:
          name: "install nodejs"
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | bash -
            apt-get install -y nodejs
      - run:
          name: run squawk
          working_directory: web_api
          command: ./s/squawk.py

  # https://circleci.com/docs/2.0/building-docker-images/
  web_api_build_container:
    docker:
      - image: docker:18.05.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build container
          working_directory: web_api
          command: ./s/build

  web_ui_lint:
    docker:
      - image: circleci/node:12.4.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes web_ui/
      - restore_cache:
          keys:
            - web-ui-v1-{{ checksum "web_ui/yarn.lock" }}
      - run:
          name: install dependencies
          working_directory: web_ui
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          paths:
            - ./web_ui/node_modules
          key: docs-site-v1-{{ checksum "web_ui/yarn.lock" }}
      - run:
          name: lint
          working_directory: web_ui
          command: ./s/lint

  web_ui_test:
    docker:
      - image: circleci/node:12.4.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: skip build if no changes
          command: |
            ./s/stop_ci_if_no_changes web_ui/
      - restore_cache:
          keys:
            - web-ui-v1-{{ checksum "web_ui/yarn.lock" }}
      - run:
          name: install dependencies
          working_directory: web_ui
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          paths:
            - ./web_ui/node_modules
          key: docs-site-v1-{{ checksum "web_ui/yarn.lock" }}
      - run:
          name: test
          working_directory: web_ui
          command: ./s/test

  shellcheck:
    docker:
      - image: ubuntu:18.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apt-get update
            apt-get install -y git shellcheck
      - run:
          name: run shellcheck
          command: |
            ./s/shellcheck

  # https://circleci.com/docs/2.0/building-docker-images/
  web_ui_build_container:
    docker:
      - image: docker:18.05.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build container
          working_directory: web_ui
          command: ./s/build

workflows:
  version: 2
  all:
    jobs:
      - shellcheck
  bot:
    jobs:
      - bot_test
      - bot_lint
      - bot_build_container:
          filters:
            tags:
              only: /^v\d*\.\d*\.\d*$/
  docs:
    jobs:
      - docs_typecheck
      - docs_fmt
      - docs_build

  web_ui:
    jobs:
      - web_ui_lint
      - web_ui_test
      - web_ui_build_container:
          filters:
            tags:
              only: /^v\d*\.\d*\.\d*$/

  web_api:
    jobs:
      - web_api_test
      - web_api_lint
      - web_api_squawk
      - web_api_build_container:
          filters:
            tags:
              only: /^v\d*\.\d*\.\d*$/
